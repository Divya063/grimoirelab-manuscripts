# -*- coding: utf-8 -*-
#
# Copyright (C) 2015-2019 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#     Pranjal Aswani <aswani.pranjal@gmail.com>
#

import os
import sys
import shutil
sys.path.insert(0, '..')

from datetime import datetime

import pandas as pd
from base import TestBaseElasticSearch
from manuscripts2.report import Report
from numpy.testing import assert_array_equal

ENRICHED_INDICES = ["git_enrich", "github_issues_enriched", "github_prs_enriched"]


class TestReport(TestBaseElasticSearch):
    """
    Test the methods contained by the Report class. Here, we will be using different
    parameters to generate the report (not what is being used in the other tests).
    """

    def check_directory_structure_generation(self, report_section):
        """
        Base function to check if the directory for a report section and the corresponding
        files in that directory are being generated properly or not.

        :param report_section: the name of the report section to be tested. It can be any of:
                               "overview", "activity", "process", "community"
        """

        section_path = os.path.join(TestReport.test_dir_path, report_section)
        self.assertTrue(os.path.exists(section_path))

        generated_files = os.listdir(section_path)
        sample_files = os.listdir(os.path.join(TestReport.sample_dir_path, report_section))
        for file in sample_files:
            self.assertIn(file, generated_files)

    def check_data_in_section_files(self, report_section, sep=","):
        """
        Base function to check if the data in the files generated in a section
        are correct or not. This function only checks the csv files.

        :param report_section: the name of the report section in which the files are to be
                               tested. It can be any of: "overview", "activity", "process",
                               "community"
        :param sep: delimiter to separate the file headers
        """

        sample_section_path = os.path.join(TestReport.sample_dir_path, report_section)
        sample_section_files = os.listdir(os.path.join(TestReport.sample_dir_path, report_section))
        generated_section_path = os.path.join(TestReport.test_dir_path, report_section)

        for file in sample_section_files:
            if file.split(".")[-1] != "eps":
                with open(os.path.join(sample_section_path, file)) as f:
                    sample_file_df = pd.read_csv(f, sep=sep)
                with open(os.path.join(generated_section_path, file)) as gf:
                    generated_file_df = pd.read_csv(gf)

                for column_name in sample_file_df.columns[1:]:
                    assert_array_equal(generated_file_df[column_name], sample_file_df[column_name])

    @classmethod
    def setUpClass(cls):
        """
        Create class level fixtures.
        """

        # The directory containing the data/directories being generated by the tests
        cls.test_dir_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                                         "test_report_dir")
        # The directory containing the data against which the generated data will be tested
        cls.sample_dir_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                                           "data/sample_report_data")

    def setUp(self):
        """
        Test level fixtures. Make sure to change these and the data in data/report_data
        folder if you change the tests.
        """

        self.ES = "http://localhost:9200"
        self.data_sources = ['git', 'github_issues', 'github_prs']
        self.indices = ['git_enrich', 'github_issues_enrich', 'github_prs_enrich']
        self.start_date = datetime(2016, 5, 25)
        self.end_date = datetime(2018, 4, 14)
        self.interval = "quarter"
        self.dir_name = "test_report_dir"
        self.report = Report(es_url=self.ES, start=self.start_date, end=self.end_date,
                             data_dir=self.dir_name, interval=self.interval,
                             data_sources=self.data_sources, indices=self.indices)

    def test_get_metric_index_using_custom_index(self):
        """
        Test if correct indices are retuned for each data source or not.
        """

        report = Report(es_url=self.ES, data_sources=self.data_sources, indices=self.indices)

        git_index = report.get_metric_index("git")
        self.assertEquals("git_enrich", git_index.index_name)

        issues_index = report.get_metric_index("github_issues")
        self.assertEquals("github_issues_enrich", issues_index.index_name)

        prs_index = report.get_metric_index("github_prs")
        self.assertEquals("github_prs_enrich", prs_index.index_name)

    def test_get_metric_index_without_custom_index(self):
        """
        Test if default indices (data source name itself) is returned for each data source
        if not indices are provided.
        """

        report = Report(es_url=self.ES, data_sources=self.data_sources, indices=[])

        git_index = report.get_metric_index("git")
        self.assertEquals("git", git_index.index_name)

        issues_index = report.get_metric_index("github_issues")
        self.assertEquals("github_issues", issues_index.index_name)

        prs_index = report.get_metric_index("github_prs")
        self.assertEquals("github_prs", prs_index.index_name)

    def test_get_sec_overview_file_generation(self):
        """
        Test if overview section of the report has it's corresponding folder and files
        initialized or not.
        """

        self.report.get_sec_overview()
        self.check_directory_structure_generation("overview")

    def test_get_sec_overview_generated_data(self):
        """
        Test the actual overview data that is generated by the report against the sample data.
        """

        self.report.get_sec_overview()
        self.check_data_in_section_files("overview", sep=", ")

    def test_get_sec_project_activity_file_generation(self):
        """
        Test if project activity section of the report has it's corresponding folder and files
        initialized or not.
        """

        self.report.get_sec_project_activity()
        self.check_directory_structure_generation("activity")

    def test_get_sec_project_activity_generated_data(self):
        """
        Test the project activity data that is generated by the report against the sample data.
        """

        self.report.get_sec_project_activity()
        self.check_data_in_section_files("activity")

    def test_get_sec_project_community_file_generation(self):
        """
        Test if project community section of the report has it's corresponding folder and files
        initialized or not.
        """

        self.report.get_sec_project_community()
        self.check_directory_structure_generation("community")

    def test_get_sec_project_community_generated_data(self):
        """
        Test the project community data that is generated by the report against the sample data.
        """

        self.report.get_sec_project_community()
        self.check_data_in_section_files("community")

    def test_get_sec_project_process_file_generation(self):
        """
        Test if project process section of the report has it's corresponding folder and files
        initialized or not.
        """

        self.report.get_sec_project_process()
        self.check_directory_structure_generation("process")

    def test_get_sec_project_process_generated_data(self):
        """
        Test the project process data that is generated by the report against the sample data.
        """

        self.report.get_sec_project_process()
        self.check_data_in_section_files("process")

    @classmethod
    def tearDownClass(cls):
        """
        Destroy the class level test fixtures that were created for the tests.
        """

        if os.path.exists(cls.test_dir_path) and os.path.isdir(cls.test_dir_path):
            shutil.rmtree(cls.test_dir_path)
